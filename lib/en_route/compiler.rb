require 'json'
module EnRoute
  class Compiler
    attr_accessor :file

    def stab i, line
     self.file.write "\n"+(1..i).collect{|i|"\s\s"}.join('')+line
    end

    def compile data, dir
      self.file = File.open "#{dir}/routes.rb", 'w'
      i = 0
      self.file.write "## This file was generated by en_route, modify routes.rr instead of this file."
      data.each do |e|
        case e[0]
        when :namespace;  stab i, "namespace :#{e[1][:name]}"
        when :resources;  stab i, "resources :#{e[1][:name]}"
        when :resource;   stab i, "resource :#{e[1][:name]}"
        when :collection; stab i, "collection"
        when :member;     stab i, "member"
        when :post;       stab i, "post :#{e[1][:name]}"
        when :get;        stab i, "get :#{e[1][:name]}"
        when :root;       self.file.write "root => '#{e[1][:to]}'"
        when :indent;     i = i.succ; self.file.write ' do'
        when :dedent;     i = i.pred; stab i, "end"
        when :ruby;       self.file.write "\n#{e[1]}"
        when :match
          params = nil
          if e[1][:params]
            p = e[1][:params].strip.gsub(/(\w+)\s*:/, '"\1":')
            p.gsub!(/'/,'"')
            p = JSON.parse(p)
            p = p.inject({}){|m,(k,v)|m[k.to_sym]=v;m}
          end
          via = e[1][:via] == ':' ? 'match' : e[1][:via]
          l = "#{via} '/#{e[1][:path]}' => '#{e[1][:to]}', :as => '#{e[1][:as]}'"
          l = l+','+p.inspect if p
          stab i, l 
        end
      end
      self.file.close
    end
  end
end
